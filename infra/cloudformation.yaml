AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Image Editor App with Rekognition integration'

Resources:
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'image-editor-app-${AWS::AccountId}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "HEAD"]
            AllowedOrigins: ["http://localhost:3000"]
            ExposedHeaders: ["ETag"]
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for public read (demo/dev only)
  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "PublicReadGetObject"
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"

  ImageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ImageMetadata
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: imageId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: imageId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: image-editor-users
      AutoVerifiedAttributes: [email]

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: image-editor-client
      GenerateSecret: false

  ImageEditorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ImageEditorRekognitionRole-${AWS::AccountId}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com, lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RekognitionAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:DetectText
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${ImageBucket}/*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageTable}'

Outputs:
  BucketName:
    Description: 'S3 bucket for image storage'
    Value: !Ref ImageBucket
  DynamoDBTableName:
    Description: 'DynamoDB table for image metadata'
    Value: !Ref ImageTable
  CognitoUserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref UserPoolClient
  RekognitionRoleArn:
    Description: 'IAM Role ARN for Rekognition access'
    Value: !GetAtt ImageEditorRole.Arn

